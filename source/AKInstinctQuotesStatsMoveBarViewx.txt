using Toybox.WatchUi as Ui; 
using Toybox.Graphics as Gfx;
using Toybox.System as Sys;
using Toybox.Lang as Lang;
using Toybox.Math as Mt;
using Toybox.Time.Gregorian; //timeinfo
using Toybox.Time;
using Toybox.System;
using Toybox.StringUtil;
using Toybox.ActivityMonitor;

var gRowHeight = 35; 
var customFontSmall = null; // esp for fenix style watches.
var gNumAPIMajorVersion = 0; // will be major version, usual 1, 2, or 3. 1 cannot have battery stats. 
var gStrDeviceName = ""; //default to blank - set to 235 later

class AKGarminQuotesStatsMoveBarView extends Toybox.WatchUi.WatchFace {

    var strVersion = "v2.3x"; //nipple on left 11/12/2021. Fix short day name eg Thur
    // added battery yellow colour and red and background color for battery AND BIG BATTERY -- move battery up and left
	
	var customFontLarge = null;

    var gNumberOfLinesToPrint=5;
    var gXForTextLoc = 30;
    var gIntFontSize=10;
    var gIntLastMoveBarLevel=0;
    var gIntNumberOfMovedHours= 0;
    
    var gStrPartNumberDevice = "";
    
    var gTinyFont = null;
    
    // Load your resources here
    function onLayout(dc) {
     customFontSmall = Ui.loadResource(Rez.Fonts.akSmallFont);
     customFontLarge = Ui.loadResource(Rez.Fonts.customFontLarge);
     gTinyFont = customFontSmall;
     var mySettings = System.getDeviceSettings();
		gStrPartNumberDevice = mySettings.partNumber;
		Sys.println("Part number is '" + gStrPartNumberDevice + "'");
		// fenix 5 =006-B3110-00, fs = 006-B2544-00
		// forerunner 235 = 006-B2431-00
		if (gStrPartNumberDevice.equals("006-B2431-00")) {
			gTinyFont = Gfx.FONT_XTINY;
			Sys.println("Setting font to by system");
			// forerunner 235
			gStrDeviceName="Forerunner235";
		}

		// check which api/sdk version this device supports
			var version = mySettings.monkeyVersion;
			var versionString = Lang.format("$1$.$2$.$3$", version);
			System.println(versionString); //e.g. 2.2.5
		    gNumAPIMajorVersion = version[0];
     		System.println(gNumAPIMajorVersion); //e.g. 2 or 1
		
     
    }

    // Called when this View is brought to the foreground. Restore
    // the state of this View and prepare it to be shown. This includes
    // loading resources into memory.
    
    // Update the view
    function onUpdate(dc) {


        dc.setColor(Gfx.COLOR_BLACK, Gfx.COLOR_BLACK);
        dc.clear();
        var clockTime = System.getClockTime();
        var hour = clockTime.hour;
		var minute = clockTime.min;

        // Get and show the current time
        
        if (!Sys.getDeviceSettings().is24Hour) {
        	hour = hour % 12;
        	if (hour==0) {
        		hour = 12;
        	}
        } // end if
            
		// =====================================================================            
		// Draw the clock / time            
		// =====================================================================
	    dc.setColor(Gfx.COLOR_WHITE,Gfx.COLOR_BLACK);
	    dc.drawText(dc.getWidth()/2, 1, Gfx.FONT_LARGE, hour.toString()+ " ", Gfx.TEXT_JUSTIFY_RIGHT);
	    dc.setColor(Gfx.COLOR_LT_GRAY, Gfx.COLOR_BLACK);
	    dc.drawText(dc.getWidth()/2, 1, Gfx.FONT_MEDIUM, Lang.format("$1$", [clockTime.min.format("%02d")]), Gfx.TEXT_JUSTIFY_LEFT);	    
	    
	     // and the version	     
	     //dc.drawText(dc.getWidth()-50, 1, Gfx.FONT_SYSTEM_XTINY, strVersion, Gfx.TEXT_JUSTIFY_RIGHT);
	     // draw multiple versions to see what size we want
	     //dc.drawText(dc.getWidth()-50, 50, Gfx.FONT_SYSTEM_NUMBER_MILD, strVersion, Gfx.TEXT_JUSTIFY_RIGHT);
	    dc.drawText(dc.getWidth()-50, 20, $.customFontSmall, strVersion, Gfx.TEXT_JUSTIFY_RIGHT);
	    // dc.drawText(dc.getWidth()-50, 150, Gfx.FONT_TINY, strVersion, Gfx.TEXT_JUSTIFY_RIGHT);
	    // dc.drawText(dc.getWidth()-50, 200, Gfx.FONT_MEDIUM, strVersion, Gfx.TEXT_JUSTIFY_RIGHT);
	     dc.setColor(Gfx.COLOR_WHITE, Gfx.COLOR_BLACK);
		// =====================================================================	     
	    // Get and draw the main quote on the screen 
		// =====================================================================
		// if the move bar is cleared, then buzz
		// if the hour is 11am or 4pm show our weekly stat
		//System.println("hour is : " + hour); 
		//System.println("min is : " + minute); 
		if ( ((hour == 7)||(hour == 12) || (hour ==16) || (hour == 20)) || (minute > 15 && minute < 30)|| ( minute > 45 && minute < 60) ) {
			// show weeks movement history
			DrawWeeksMovementHistory(dc);
			System.println("do weeks movement");
		} else {
		
			GetQuoteSizeAndDraw(dc);
				
		}	    
	    
	    dc.setColor(Gfx.COLOR_WHITE,Gfx.COLOR_BLACK); // just in case we changed it 
	    
	    
	    
	    
		// =====================================================================	    
	    // Put some battery stats	    
		// =====================================================================	    
		var myStats = System.getSystemStats();
		//System.println(myStats.battery);
		//System.println(myStats.totalMemory);
		var strBatteryPercent = Lang.format("$1$",[myStats.battery.format("%02d")])+ "%";	    
		
		var batteryX = 59;
		var batteryHeight = 27; // was 14
		var batteryWidth = 40;
		var dateAndBatteryHeight = 46;
		
		var dateStartYBatteryAndDate = dc.getHeight()-dateAndBatteryHeight-5;
		var batteryY = dateStartYBatteryAndDate+4;
 		var textColor="";
 		var lineColor="";
		var backColor="";
		
		var intBatteryWarning = 10;
		var intBatterySevere = 5;
		
		
		// set the colour for the battery if it is low what about making it red if the battery is less than 15%?
		 
		if (myStats.battery < intBatterySevere ) { 	
		 	// make the battery bolder, ie thicker 

		 	System.println("Drawing red and thicker");
		 	textColor = Gfx.COLOR_WHITE;
		 	lineColor = Gfx.COLOR_RED;
		 	backColor = Gfx.COLOR_RED;
		 	dc.drawRoundedRectangle(batteryX-4, batteryY, batteryWidth, batteryHeight,1 );
		 } else if ( myStats.battery < intBatteryWarning  ) {
 		 				
		 	textColor = Gfx.COLOR_WHITE;
		 	lineColor = Gfx.COLOR_YELLOW;
		 	backColor = Gfx.COLOR_YELLOW;
		
		 	
		 } else {
			
			textColor = Gfx.COLOR_WHITE;
		 	lineColor = Gfx.COLOR_WHITE;
		 	backColor = Gfx.COLOR_DK_GREEN;

		 
		 }


		//if battery is charging, set an orange dot or something
		System.println(gNumAPIMajorVersion); //e.g. 2 or 1)
		if (gNumAPIMajorVersion>= 3) {
			if (myStats.charging!=0) {
			dc.setColor(Gfx.COLOR_YELLOW, Gfx.COLOR_BLACK);
			dc.drawText(batteryX-18, batteryY-2 ,  Gfx.FONT_TINY, "z" , Gfx.TEXT_JUSTIFY_LEFT);
			} // end if charging
		} // if version > 3



         dc.setColor(textColor,backColor);		 	
	     dc.drawText(batteryX, batteryY ,  Gfx.FONT_TINY,strBatteryPercent , Gfx.TEXT_JUSTIFY_LEFT);
	     //draw a box around the battery that looks like a battery?	     
	     
	     
	     dc.setColor(lineColor,textColor); 	
	     dc.drawRoundedRectangle(batteryX-2, batteryY, batteryWidth, batteryHeight,1 );	      
	     		 	
	     // draw the battery nipple - just the nipple     //dc.drawRoundedRectangle(x, y, width, height, radius)
	     dc.drawRoundedRectangle(batteryX-5, batteryY+9, 4, 12, 2);




		// reset color
	     dc.setColor(Gfx.COLOR_WHITE,Gfx.COLOR_BLACK);
	    
	    
	   	// =====================================================================	    
	    // Put the date	    
		// =====================================================================	

		var now = Time.now();
		var info = Gregorian.info(now, Time.FORMAT_LONG);
		var infoShort = Gregorian.info(now, Time.FORMAT_SHORT); // for a shorter day, eg Thu instead of Thurs
		var dateStr;
		dateStr = Lang.format("$1$ $2$$3$", [GetShortDayNameFromNumber(infoShort.day_of_week), info.month, info.day]);
		
			var gTinyFont = Gfx.FONT_TINY; // will make the date bigger than battery stats
	//	dateStartYBatteryAndDate = 200;
		try {
			// Code to execute
			dc.drawText(dc.getWidth()-50, dateStartYBatteryAndDate+2, gTinyFont,dateStr , Gfx.TEXT_JUSTIFY_RIGHT);
		} catch( ex ) {
		// Code to catch all execeptions

			System.println("exception is 76 : " + ex.getErrorMessage());
		}
		
		
		
	    // =====================================================================
	    // show kms travelled
	    // =====================================================================
	    DrawKMTravelledAndMoveBar(dc);
	    	  //  drawTextOverMultiLines( dc, "Let us run the race that is set before us.");	    	    	    
	} // end onUpdate


	function GetQuoteSizeAndDraw(dc) {
	
		var strQuote = getRandomQuote();
		drawTextOverMultiLines( dc, strQuote );
	
	} // end GetQouteSizeAndDraw
	
	
	// ================================================================================================
	// will draw 2k steps/2km 
	// I will add a comment eg 1km stps/2km - Not moving much
	// etc
	// Maybe keep a counter and if not walking for 2 days and those days aren't sat and sunday ask if you are tired
	// ================================================================================================
	function DrawWeeksMovementHistory(dc) {
	
			var intNumberOfDaysHistoryToShow = 5; // default to 5 days history . change for forerunner 235 as it can't fit taht many
			if (gStrDeviceName.equals("Forerunner235")) {
				intNumberOfDaysHistoryToShow = 3;
			}
				// get a HeartRateIterator object; oldest sample first
			var dailyHistoryArr = ActivityMonitor.getHistory(); //gets 7 days history
			    System.println("Draw previous history");  // print the previous sample
			    System.println("history array size is " + dailyHistoryArr.size() );  // print the previous sample
			    
			// GEt the current day eg Monday/Tuesday/Wednessay to work out what days we have			
			var infoDateTimeNow = Gregorian.info(Time.now(), Time.FORMAT_SHORT); // 6= friday
			 System.println(infoDateTimeNow.day_of_week);
			 var intDayOfWeekToday = infoDateTimeNow.day_of_week; // eg 6 = friday

			System.println("Today is " + 			GetShortDayNameFromNumber(intDayOfWeekToday));						
			var intYForStats = dc.getHeight()-100;
			var intXLocationForDay = 30;
			var intXLocationForKms = 80; //dc.getWidth()/2;
			var strDayOfReading = "";
			var intDistanceInKmsForDay = 0;			    
			var strComment = "";
			var strText = "";
			var intTotalKmsForWeek = 0;
			var intHeightOfText = 20;
			
			var fontSize = 1; //smallest font size;
			
			// loop through the 7 day history on the watch			    
			for( var i = 0; i < dailyHistoryArr.size(); i++ ) { 
				if( i < intNumberOfDaysHistoryToShow ) { // i only want to show 4 days history plus today
				
				    //System.println("Previous: " + i + " day" +  dailyHistoryArr[i].steps + " steps / ");  // print the previous sample
				    //System.println("Previous: " + dailyHistoryArr[i].distance + " d");  // print the previous sample
				    
					strDayOfReading = GetShortDayNameFromNumber(intDayOfWeekToday-1-i); // will accept negative numbers and convert to day of week. 
				    intDistanceInKmsForDay = GetKMMoved(dailyHistoryArr[i].distance);
				    intTotalKmsForWeek = intTotalKmsForWeek + intDistanceInKmsForDay;
				    if (strDayOfReading.equals("Sun") ) {
				    	strComment = " / Wknd";
					} else if (intDistanceInKmsForDay > 15) {
				    	strComment = "/ :D :D Hooray!";
				    	} else if (intDistanceInKmsForDay > 14) {
				    	strComment = "/ Great!";										    			
				    } else if (intDistanceInKmsForDay > 13) {
				    	strComment = "/ Fantastic!";										    			
				    } else if (intDistanceInKmsForDay > 12) {
				    	strComment = "/ Excellent!";										    			
				    } else if (intDistanceInKmsForDay > 11) {
				    	strComment = "/ Delightful :)";										    			
				    } else if (intDistanceInKmsForDay > 10) {
				    	strComment = "/ Cheering";
				    } else if (intDistanceInKmsForDay > 9) {
				    	strComment = "/ Beauty!";										    			
				    } else if (intDistanceInKmsForDay > 8) {
				    	strComment = "/ Awesome";				
				    } else if (intDistanceInKmsForDay > 7) {
				    	strComment = "/ Walk boy";									
				    } else if (intDistanceInKmsForDay > 6) {
						strComment = "/ Meh";								
				    } else if (intDistanceInKmsForDay > 5) {
						strComment = "/ Slowish?";											    	
				    } else if (intDistanceInKmsForDay < 5) {
						strComment = "/ Quiet";
													    			
				    	
				    } else {
				       strComment = "";
				    }
				    
				    strText = intDistanceInKmsForDay + " kms " + strComment;
				    
				    dc.drawText(intXLocationForDay, intYForStats-(intHeightOfText*i), fontSize,
				       strDayOfReading, Gfx.TEXT_JUSTIFY_LEFT);
    			    dc.drawText(intXLocationForKms, intYForStats-(intHeightOfText*i), fontSize,
				      strText , Gfx.TEXT_JUSTIFY_LEFT);
				    }
		    	    
			} // end for loop
			dc.drawText(intXLocationForDay, intYForStats-(intHeightOfText*(5)), fontSize, "Week ", Gfx.TEXT_JUSTIFY_LEFT);
		    dc.drawText(intXLocationForKms+ 20, intYForStats-(intHeightOfText*(5)), fontSize,
		      intTotalKmsForWeek + " kms" , Gfx.TEXT_JUSTIFY_LEFT);
			
						
	
	} // showweeks movelmet history
	
	function GetShortDayNameFromNumber(intNumber) {
		// eg given 5, return Thursday
		// given 4, return Wednesday
		// given 3 - Tue, 2 = Mon, 1 = Sun, 0 = Sat, -1 = Friday, -2 = Thu, -3 = Wed
		if (intNumber<0) {
		  intNumber = intNumber+7;
		}
		var strDayNameShort = "NoIdea";
		if (intNumber == 0) {
		  strDayNameShort = "Sat";
		} else if (intNumber == 1) {
		  strDayNameShort = "Sun";
		} else if (intNumber == 2) {
		  strDayNameShort = "Mon";
		} else if (intNumber == 3) {
		  strDayNameShort = "Tue";
		} else if (intNumber == 4) {
		  strDayNameShort = "Wed";
		} else if (intNumber == 5) {
		  strDayNameShort = "Thu";
		} else if (intNumber == 6) {
		  strDayNameShort = "Fri";
		} else if (intNumber == 7) {
		  strDayNameShort = "Sat";
		} 
		return strDayNameShort;
	} 
	
	function convertToThousandsShorthand(aNumber) {
	    // eg convert 11200 to 11.2
	    var newNumber = aNumber / 1000;
	    System.println(newNumber);
	    return newNumber;
	}
	
	function GetKMMoved(distanceInCMs) {
		var strKMMoved = 0;
		if (distanceInCMs != null) {
	    	strKMMoved = distanceInCMs/100/1000;
//	    	strKMMoved =  Lang.format("$1$", [strKMMoved("%02d")]);
	    }
	    return strKMMoved;
	    }
	
	
	function DrawKMTravelledAndMoveBar(dc) {
	// draw how far we have gone today and show move bar if we haven[t moved much
		var xForStepsAndKms = 40;
	    var yForStepsKMAndMoveNumber = dc.getHeight()-73; // was 69
	    var strCMSMoved = ActivityMonitor.getInfo().distance;	    
	    Sys.println(strCMSMoved + " moved cm today");
	    var strKMMoved = 0;
	    strKMMoved = GetKMMoved(strCMSMoved);
		var	    strSteps = 0;
	    if ( ActivityMonitor.getInfo().steps != null) {
	    strSteps =  ActivityMonitor.getInfo().steps;
	    }
	    
	   // does not work on forerunner 235! it's not a cq2 device! var strActiveMinutes = ActivityMonitor.getInfo().activeMinutesDay; 
	    var strStepsAndKms = convertToThousandsShorthand(strSteps) + "k stps/" + strKMMoved + " kms";
	    dc.drawText(xForStepsAndKms, yForStepsKMAndMoveNumber, Gfx.FONT_SMALL,strStepsAndKms , Gfx.TEXT_JUSTIFY_LEFT);
	    
   	    // =====================================================================
	    // add move bar - red
	    // =====================================================================
	    if (ActivityMonitor.getInfo().moveBarLevel > 0) {
		    dc.setColor(Gfx.COLOR_RED,Gfx.COLOR_BLACK); // just in case we changed it 	     
		    var startXForMoveBarValue = dc.getWidth()-20;
		    dc.drawText(startXForMoveBarValue, yForStepsKMAndMoveNumber-10, Gfx.FONT_SMALL,ActivityMonitor.getInfo().moveBarLevel , Gfx.TEXT_JUSTIFY_RIGHT);	    	    
	   }
	    var intMoveBarLevelCurrent = ActivityMonitor.getInfo().moveBarLevel;	    	     
	     if (gIntLastMoveBarLevel > 0) {
		     if (ActivityMonitor.getInfo().moveBarLevel==0) {
    	     	gIntNumberOfMovedHours=gIntNumberOfMovedHours+1 ; // might need to reset this each day
		     }
		   }
	      gIntLastMoveBarLevel=intMoveBarLevelCurrent;
	      Sys.println("-------------------- Move bar level ------------------------------");
	      Sys.println("Last level = " + gIntLastMoveBarLevel + ", current level = " + intMoveBarLevelCurrent);
	      Sys.println("Number of hours moved = " + gIntNumberOfMovedHours);
	      Sys.println("-------------------- Move bar level ------------------------------");
	    var moveBarLength = ActivityMonitor.getInfo().moveBarLevel*25;	    	    
	   // dc.drawLine(40, startY, 40+moveBarLength, startY);
	    dc.drawRectangle(xForStepsAndKms, yForStepsKMAndMoveNumber-2, moveBarLength, 2);
	    // dc.setColor(Gfx.COLOR_WHITE,Gfx.COLOR_BLACK); // just in case we changed it 
	     // and draw a thiker? bar to highliht 
	     dc.drawRectangle(xForStepsAndKms, yForStepsKMAndMoveNumber, moveBarLength, 2);
	    
	
	 } // end drawkm travlled

	function drawTextOverMultiLines( dc, strText ) {
	
		// Choose a font size based on the length of the quote. 
		var myFont = ChooseFontBasedOnLengthAndSetColorFenix5(strText, dc);
		
		var rowHeight = $.gRowHeight; // check row height... do variables work? Globals?		
		//Sys.println(strText);
		var oneCharWidth=dc.getTextWidthInPixels("AbCdEfGhIj",myFont)/10;
		var intCharsPerLine= dc.getWidth()/oneCharWidth-2; // was -2 to make it look nicer ie not to edge, rmeoved by ak for fenix 5 to fit more
		
		var intLenLeftToPrint = strText.length();
		var yStartPosition = 30; // starting y position
	
	 	//Sys.println("length is  " + strText.length() + " number which can fit on line =" + intCharsPerLine);
		var intNumberOfLinesNeeded = (strText.length()*1.00)/(intCharsPerLine-2)*1.00; //-2 is a fudge because God loves me is going on 3 lines but this returns 2~!!!!!
		//Sys.println("number of lines needed = " + intNumberOfLinesNeeded);
		
		
		Sys.println("intNumberOfLinesNeeded= "  + intNumberOfLinesNeeded + " yStartPosition is " + yStartPosition + " rowHeight is " + rowHeight);
		if (intNumberOfLinesNeeded == 1 ) {
		       yStartPosition = dc.getHeight()/2-rowHeight; //- put it in the middleish!
		   //Sys.println("1 lines exactly... put it in the middle!");
		
		}
		
				if (intNumberOfLinesNeeded > 1 && intNumberOfLinesNeeded<2 ) {
		       yStartPosition = dc.getHeight()/2-rowHeight*1.2; //- put it in the middleish!
		     //Sys.println("2 lines needed ... put it in the 2iddle!");
		
		}
		
		
		if (intNumberOfLinesNeeded > 2 && intNumberOfLinesNeeded < 3) {
		       yStartPosition = dc.getHeight()/2-rowHeight*1.5; //- put it in the middleish!
		    //Sys.println("three lines... put it in the middle!");
		
		}
		
		if (intNumberOfLinesNeeded >= 3 && intNumberOfLinesNeeded < 4) {
		       yStartPosition = dc.getHeight()/2-rowHeight*2.1; //- put it in the middleish!
		      //Sys.println("4 lines... put it in the middle!");
		
		}
		
		if (intCharsPerLine > strText.length() ) {
				// if we all fit on one line... 
		 yStartPosition = dc.getHeight()/2-rowHeight*0.8; //- put it in the middle!
		     //Sys.println("Only 1 line.. try to put it in themiddle");
		}
		
		Sys.println("yStartPosition is " + yStartPosition + " rowHeight is " + rowHeight);
		var intLastSpaceLoc;
		
		
		var intLocOfLastSpace=0;
		
		// print out the words on multiple lines
		//Sys.println("Starting to get each line...");
		do {
		   
		   // find last " " before the width allowed.
		   
		   intLastSpaceLoc = findLastSpaceBeforeLineLength( strText, intCharsPerLine );
//Sys.println("Last Space loc = " + intLastSpaceLoc);		   
		   if (intLastSpaceLoc == -1) {
		    	intLastSpaceLoc = intLenLeftToPrint;
		   }		   		   
		   var strPrintThis = strText.substring(0, intLastSpaceLoc); // need to fix this to find first " " before end
		   //intLocOfLastSpace = strPrintThis.find( 
		   strText = strText.substring(intLastSpaceLoc+1, strText.length());
		   intLenLeftToPrint = strText.length();
		   dc.drawText(gXForTextLoc,yStartPosition, myFont, strPrintThis, Gfx.TEXT_JUSTIFY_LEFT);
		   yStartPosition = yStartPosition + gRowHeight; 
		} while  (intLenLeftToPrint > intCharsPerLine );
		
		// draw anything left 
		dc.drawText(gXForTextLoc,yStartPosition, myFont, strText, Gfx.TEXT_JUSTIFY_LEFT);
		
	}
	
	
	 function findLastSpaceBeforeLineLength( strText, intMaxLineLength ) {


		// too slow on actual watch, just split
		
		
	 	var strLeftOfLineLengthText;
	 	var intSpacePos;
	 	
	 	if (strText.length() < intMaxLineLength) {
	 	  return -1;
	 	} else {
	 	 	strLeftOfLineLengthText =  strText.substring(0, intMaxLineLength);
	 	 	/// now find last space before end
	 	 	intSpacePos = lastIndexOf( " ", strLeftOfLineLengthText);	 	 	
	 	}
	 	return intSpacePos;
	   	 
	 } // end findlastspacebeofer
	 
	 
	 function lastIndexOf(charFind, strSource)
	{
    var index = 0;
    var i = 0;
    var strOriginalSource = strSource;
	var intLocOfSpace;
    while(i<strSource.length())
    {
    	intLocOfSpace = strSource.find(charFind);
        // Update index if match is found
        if(intLocOfSpace!= null)
        {
        	
            index = index+ intLocOfSpace+1;   
            //Sys.println("space found at  " + intLocOfSpace + " for '" + strSource +"'");  
            // substring to only search rest
            strSource = strSource.substring(intLocOfSpace+1, strSource.length());       
            //Sys.println("new source '" + strSource + "'"); 
        }
        i++;
        
    }

	//	Sys.println("last space is at " + index + " for " + strOriginalSource);
    return index-1;
}
	 
	 function findLastIndexOfSlow( strFind, strSource ) {
	 
	 	// let's reverse the characters and find first space
	 	// 
	 	
	 	
	 	// first check if the find text is in the source at all
	 	var intPos =-1;
	 	var charArrReversedSource=null;
	 	var charArrReversedFind=null;
	 	var strSourceArray = strSource.toCharArray();
	 	var strFindArray = strFind.toCharArray();
	 	intPos = strSource.find(strFind);				
	 	if (intPos == null) {
	 	  return -1;
	 	}
	 		  	
		charArrReversedSource = strSourceArray.reverse();
	 	// we need to also reverse the search text
        charArrReversedFind = strFindArray.reverse();
	//	 	Sys.println("Searching for (reveresed ) " + charArrReversedFind + " in  " + charArrReversedSource);
	 		 	
	 	// convert back to strings
	 	var strReversedSource = StringUtil.charArrayToString(charArrReversedSource);
	 	var strReversedFind = 	StringUtil.charArrayToString(charArrReversedFind);
		var intReversedPos = strReversedSource.find(strReversedFind);  
				
		//Sys.println("2. Found reversed space at location " + (intReversedPos));
		//Sys.println("3. Found last space as location " + (strReversedSource.length() - intReversedPos));		
		return strReversedSource.length() - intReversedPos-1;
		
	 } // end find


	

	function GetQuoteSizeAndDraw2(dc) {
	
		var strQuote = getRandomQuote();
		var myFont = Gfx.FONT_LARGE;
		
		//Sys.println("Number of chars is " + strQuote.length() );	
		myFont = ChooseFontBasedOnLengthAndSetColorFenix5( strQuote, dc );	
		dc.drawText(40, 30, myFont, convertTextToMultiline(dc, myFont, strQuote ), Gfx.TEXT_JUSTIFY_LEFT);
	
	}
	
	function ChooseFontBasedOnLengthAndSetColorFenix5( strQuote, dc ) { // passed in dc so i can change color!
	var myFont = null; 
	if (strQuote.length() > 250 ) {
		
			myFont = Gfx.FONT_XTINY;
		Sys.println( "font size is xtiny Length is " + strQuote.length());
		} else if (strQuote.length() > 160 ) {
			gRowHeight = 5;			
			myFont = Gfx.FONT_TINY;
			Sys.println( "font size is tiny Length is " + strQuote.length());
		
		} else if ( strQuote.length() > 90 )  {
			gRowHeight = 23;
		   myFont = Gfx.FONT_SMALL;
		 Sys.println( "font size is small Length is " + strQuote.length());
		
		} else if ( strQuote.length() > 50 ) {
			gRowHeight = 22;	
			myFont  = Gfx.FONT_MEDIUM;
		Sys.println( "font size is med  Length is " + strQuote.length());
					
		} else if ( strQuote.length() > 31 ){
		gRowHeight = 30;
		  myFont = Gfx.FONT_LARGE;
		  Sys.println( "font size is large. Length is " + strQuote.length());
		  Sys.println( strQuote );
		  } else {
		  myFont = customFontLarge;
		  gRowHeight = 40;
		   dc.setColor(Gfx.COLOR_BLUE, Gfx.COLOR_BLACK);
		 Sys.println( "font size is xlarge");
		  
		  
		} // will default to large
		return myFont; 
	} // end choose Font size


	function getRandomQuote() {
	
		// I'll change it to get teh quote based on the date. Otherwise it changes waaaay too much. 
		
		var arrQuotes =  new [7];		
		arrQuotes[0]=  "Run the race to the finish. Dean Karnazes";
		arrQuotes[1]=  "God      Loves       Me";
		arrQuotes[2]=  "I RUN THIS BODY";
		arrQuotes[3]=  "I'll be happy if running and I can grow old together. Haruki Murakami";
		arrQuotes[4]=  "Running! There's no activity happier, more exhilarating, more nourishing to the imagination. Oates";
		arrQuotes[5]=  "Running (and God) is my therapy.";
		arrQuotes[6]=  "Fitness starts now!";	
		
		var today = Gregorian.info(Time.now(), Time.FORMAT_SHORT);
		var r;	
		r = Mt.rand() % arrQuotes.size(); //Random number			
		//r = today.day_of_week-1; // get based on day of week,n ot random
		//Sys.println(r); //To check the result
		//r=0;
		return arrQuotes[r]; 
			
	}

	function convertTextToMultiline(dc, font, text){
		var extraRoom = 0.5;
		var oneCharWidth = dc.getTextWidthInPixels("EtaoiNshrd",font)/10;
		var charPerLine = extraRoom * dc.getWidth()/oneCharWidth;
		Sys.println("Char per line is " + charPerLine + " maybe could be "  + dc.getWidth()/oneCharWidth);
		return convertTextToMultilineHelper(text, charPerLine);
	}

	function convertTextToMultilineHelper(text, charPerLine) {
	    if (text.length() <= charPerLine) {
	        return text;
	    } else {
	        var i = charPerLine + 1;
	        for (; i >= 0; i--) {
	            if (text.substring(i, i + 1).equals("\n")) {
	                break;
	            }
	        }
	        if (i >= 0) {
	            var line = text.substring(0, i);
	            var textLeft = text.substring(i + 1, text.length());
	            var otherLines = convertTextToMultilineHelper(textLeft, charPerLine);
	            return line + "\n" + otherLines;
	        } else {
	            var lastChar = charPerLine + 1;
	            while (!(text.substring(lastChar, lastChar + 1).equals(" ") || text.substring(lastChar, lastChar + 1).equals("\n"))&& lastChar >= charPerLine/2) {
	                lastChar--;
	            }
	            if (lastChar >= charPerLine/2) {
	                var line = text.substring(0, lastChar + 1);
	                var textLeft = text.substring(lastChar + 1, text.length());
	                var otherLines = convertTextToMultilineHelper(textLeft, charPerLine);
	                return line + "\n" + otherLines;
	            } else {
	                var line = text.substring(0, charPerLine) + "-";
	                var textLeft = text.substring(charPerLine, text.length());
	                var otherLines = convertTextToMultilineHelper(textLeft, charPerLine);
	                return line + "\n" + otherLines;
	            }
	        }
	    }
	}
	

		//==============================================================
		// Load up custom fonts - using EXCLUDE annotations specified in the JUNGLE file
		//==============================================================
	//(:smallMem)
	/*
	function loadMyFonts() { // not in use yet I need to create my fonts! 10 Jan 2020
		var sysSettings = System.getDeviceSettings();
		var PN = sysSettings.partNumber;
		
		switch (PN) {
		// add custom fonts with height 22
		case "006-B3111-00": case "006-B2604-00": case "006-B2900-00": case "006-B3110-00": case "006-B3288-00": case "006-B2886-00": case "006-B3077-00":
		Fonts[C1] = WatchUi.loadResource(Rez.Fonts.my22);
		Fonts[C2] = null;
		break;
		
		// add custom fonts with height 22 & 26
		case "006-B3290-00": case "006-B3291-00":
		Fonts[C1] = WatchUi.loadResource(Rez.Fonts.my22);
		Fonts[C2] = WatchUi.loadResource(Rez.Fonts.my26);
		break;
		
		// add custom fonts with height 26 & 31
		case "006-B2530-00": case "006-B3112-00": case "006-B1836-00":
		Fonts[C1] = WatchUi.loadResource(Rez.Fonts.my26);
		Fonts[C2] = WatchUi.loadResource(Rez.Fonts.my31);
		break;
		
		// add custom fonts with height 31 & 35
		case "006-B3122-00": case "006-B3121-00":
		Fonts[C1] = WatchUi.loadResource(Rez.Fonts.my31);
		Fonts[C2] = WatchUi.loadResource(Rez.Fonts.my35);
		break;
		
		// add custom fonts with height 35 & 41
		case "006-B2713-00": case "006-B3095-00":
		Fonts[C1] = WatchUi.loadResource(Rez.Fonts.my35);
		Fonts[C2] = WatchUi.loadResource(Rez.Fonts.my41);
		break;
		}
	} // end load custom fonts. 

*/
    // Called when this View is removed from the screen. Save the
    // state of this View here. This includes freeing resources from
    // memory.
    function onHide() {
    }

    // The user has just looked at their watch. Timers and animations may be started here.
    function onExitSleep() {
    }

    // Terminate any active timers and prepare for slow updates.
    function onEnterSleep() {
    }

}
